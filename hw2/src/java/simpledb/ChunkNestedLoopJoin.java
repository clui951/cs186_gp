package simpledb;

import java.util.*;

/**
 * The ChunkNestedLoopJoin operator implements the chunk nested loop join operation.
 */
public class ChunkNestedLoopJoin extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate pred;
    private DbIterator child1, child2;
    private TupleDesc comboTD;
    private int chunkSize;
    private Chunk child1Chunk;
    private Iterator<Tuple> child1ChunkTuples;
    private Tuple currentChild1Tuple;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     * @param chunkSize
     *            The chunk size used for chunk nested loop join
     */
    public ChunkNestedLoopJoin(JoinPredicate p, DbIterator child1, DbIterator child2, int chunkSize) {
        this.pred = p;
        this.child1 = child1;
        this.child2 = child2;
        this.chunkSize = chunkSize;
        comboTD = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
        this.child1Chunk = new Chunk(this.chunkSize);
    }

    public JoinPredicate getJoinPredicate() {
        return pred;
    }

    public TupleDesc getTupleDesc() {
        return comboTD;
    }

    /**
     * Opens the iterator.
     */
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        this.child1.open();
        this.child2.open();
        super.open();
    }

    /**
     * Closes the iterator.
     */
    public void close() {
        this.child1.close();
        this.child2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
    }

    /**
     * Returns the current chunk. 
     */
    public Chunk getCurrentChunk() throws DbException, TransactionAbortedException {
        // IMPLEMENT ME
        return this.child1Chunk;
    }
 
    /**
     * Updates the current chunk with the next set of Tuples and returns the chunk.
     */
    protected Chunk fetchNextChunk() throws DbException, TransactionAbortedException {
        this.child1Chunk.loadChunk(child1);
        this.child1ChunkTuples = Arrays.asList(this.child1Chunk.getChunkTuples()).iterator();
        return this.child1Chunk;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. 
     * 
     * Note that the tuples returned from this particular implementation
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results.
     * 
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if (this.child1ChunkTuples == null) {  // Set up for first run
            this.fetchNextChunk();
            this.currentChild1Tuple = this.child1ChunkTuples.next();
        }
        while (this.child1ChunkTuples.hasNext() || child1.hasNext()) {
            // At this point we either have a valid tuple or we can still load another page
            // if (!this.child1ChunkTuples.hasNext()) {
            //     this.fetchNextChunk();
            // }
            if (!this.child2.hasNext()) {
                this.child2.rewind();
                if (!this.child1ChunkTuples.hasNext()) {
                    this.fetchNextChunk();
                }
                this.currentChild1Tuple = this.child1ChunkTuples.next(); 
                if (this.currentChild1Tuple == null) {  // Filler null-tuples of the last page if it's not a clean split
                    return null; 
            }

            }
            Tuple child1Tup = this.currentChild1Tuple;
            Tuple child2Tup = this.child2.next();

            if (this.pred.filter(child1Tup, child2Tup)) {  // Check if condition is satisfied
                Tuple t1 = child1Tup;
                Tuple t2 = child2Tup;
                int td1n = t1.getTupleDesc().numFields();
                int td2n = t2.getTupleDesc().numFields();

                // set fields in combined tuple
                Tuple t = new Tuple(comboTD);  // Creating combined tuple
                for (int i = 0; i < td1n; i++)
                    t.setField(i, t1.getField(i));
                for (int i = 0; i < td2n; i++)
                    t.setField(td1n + i, t2.getField(i));
                return t;
            }
        }
        return null;   
    }

    @Override
    public DbIterator[] getChildren() {
        return new DbIterator[] { this.child1, this.child2 };
    }

    @Override
    public void setChildren(DbIterator[] children) {
        this.child1 = children[0];
        this.child2 = children[1];
    }

}